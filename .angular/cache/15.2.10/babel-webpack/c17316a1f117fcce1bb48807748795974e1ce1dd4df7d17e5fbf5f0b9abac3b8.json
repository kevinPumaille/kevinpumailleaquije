{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class InterceptionObserverDirective {\n  constructor(el) {\n    this.el = el;\n  }\n  ngAfterViewInit() {\n    this.observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        const id = entry.target.getAttribute(\"id\");\n        const menuLink = document.querySelector(`.menu a[href=\"#${id}\"]`);\n        if (entry.isIntersecting) {\n          document.querySelector(\".menu a.selected\").classList.remove(\"selected\");\n          menuLink.classList.add(\"selected\");\n          console.log(\"Seleccionado\", id);\n        }\n      });\n    }, {\n      rootMargin: \"-30% 0px -70% 0px\"\n    });\n    this.observer.observe(this.el.nativeElement);\n  }\n  static #_ = this.ɵfac = function InterceptionObserverDirective_Factory(t) {\n    return new (t || InterceptionObserverDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InterceptionObserverDirective,\n    selectors: [[\"\", \"appInterceptionObserver\", \"\"]],\n    standalone: true\n  });\n}","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,6BAA6B;EAIxCC,YAAoBC,EAAc;IAAd,OAAE,GAAFA,EAAE;EAAc;EAEpCC,eAAe;IAEb,IAAI,CAACC,QAAQ,GAAG,IAAIC,oBAAoB,CACrCC,OAAO,IAAI;MAEVA,OAAO,CAACC,OAAO,CAAGC,KAAK,IAAI;QACzB,MAAMC,EAAE,GAAGD,KAAK,CAACE,MAAM,CAACC,YAAY,CAAC,IAAI,CAAC;QAC1C,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,kBAAkBL,EAAE,IAAI,CAAC;QAEjE,IAAID,KAAK,CAACO,cAAc,EAAE;UACxBF,QAAQ,CAACC,aAAa,CAAC,kBAAkB,CAAC,CAACE,SAAS,CAACC,MAAM,CAAC,UAAU,CAAC;UACvEL,QAAQ,CAACI,SAAS,CAACE,GAAG,CAAC,UAAU,CAAC;UAClCC,OAAO,CAACC,GAAG,CAAC,cAAc,EAACX,EAAE,CAAC;;MAGlC,CAAC,CAAC;IAEJ,CAAC,EAAC;MAACY,UAAU,EAAC;IAAmB,CAAE,CACpC;IAED,IAAI,CAACjB,QAAQ,CAACkB,OAAO,CAAC,IAAI,CAACpB,EAAE,CAACqB,aAAa,CAAC;EAE9C;EAAC;qBA5BUvB,6BAA6B;EAAA;EAAA;UAA7BA,6BAA6B;IAAAwB;IAAAC;EAAA","names":["InterceptionObserverDirective","constructor","el","ngAfterViewInit","observer","IntersectionObserver","entries","forEach","entry","id","target","getAttribute","menuLink","document","querySelector","isIntersecting","classList","remove","add","console","log","rootMargin","observe","nativeElement","selectors","standalone"],"sourceRoot":"","sources":["/Users/kevin/Desktop/portafolio/src/app/directives/InterceptionObserver.directive.ts"],"sourcesContent":["import { AfterViewInit, Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appInterceptionObserver]',\n  standalone: true,\n})\nexport class InterceptionObserverDirective implements AfterViewInit{\n\n  private observer: IntersectionObserver;\n\n  constructor(private el: ElementRef){}\n\n  ngAfterViewInit(): void {\n    \n    this.observer = new IntersectionObserver(\n      (entries) => {\n\n        entries.forEach( (entry) => {\n          const id = entry.target.getAttribute(\"id\");                \n          const menuLink = document.querySelector(`.menu a[href=\"#${id}\"]`);\n\n          if (entry.isIntersecting) {\n            document.querySelector(\".menu a.selected\").classList.remove(\"selected\");\n            menuLink.classList.add(\"selected\");\n            console.log(\"Seleccionado\",id);\n          }\n\n        });\n\n      },{rootMargin:\"-30% 0px -70% 0px\" }\n    );\n\n    this.observer.observe(this.el.nativeElement);\n\n  }\n\n  \n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}